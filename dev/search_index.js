var documenterSearchIndex = {"docs":
[{"location":"combinatorics/#combinatorics","page":"Combinatorics","title":"Combinatorics","text":"","category":"section"},{"location":"combinatorics/","page":"Combinatorics","title":"Combinatorics","text":"stirlings2\nlogstirlings2\nstirlings2r\nlogstirlings2r\nunsignedstirlings1\nlogunsignedstirlings1\nbellnum\nbellnumr\nlogbellnumr\nPartitionSpace","category":"page"},{"location":"combinatorics/#EqualitySampler.stirlings2","page":"Combinatorics","title":"EqualitySampler.stirlings2","text":"Compute the Stirlings numbers of the second kind. The EqualitySampler.ExplicitStrategy (default) uses an explicit loop and is computationally more efficient but subject to overflow, so using BigInt is advised. The EqualitySampler.RecursiveStrategy uses recursion and is mathematically elegant yet inefficient for large values.\n\n\n\n\n\n","category":"function"},{"location":"combinatorics/#EqualitySampler.logstirlings2","page":"Combinatorics","title":"EqualitySampler.logstirlings2","text":"Compute the logarithm of the Stirlings numbers of the second kind with an explicit formula.\n\n\n\n\n\n","category":"function"},{"location":"combinatorics/#EqualitySampler.stirlings2r","page":"Combinatorics","title":"EqualitySampler.stirlings2r","text":"stirlings2r(n::T, k::T, r::T) where T <: Integer\nstirlings2r(n::T, k::T, r::T, ::Type{EqualitySampler.ExplicitStrategy})  where T <: Integer\nstirlings2r(n::T, k::T, r::T, ::Type{EqualitySampler.RecursiveStrategy}) where T <: Integer\n\nCompute the r-Stirlings numbers of the second kind. The EqualitySampler.ExplicitStrategy (default) uses an explicit loop and is computationally more efficient but subject to overflow, so using BigInt is advised. The EqualitySampler.RecursiveStrategy uses recursion and is mathematically elegant yet inefficient for large values.\n\n\n\n\n\n","category":"function"},{"location":"combinatorics/#EqualitySampler.logstirlings2r","page":"Combinatorics","title":"EqualitySampler.logstirlings2r","text":"logstirlings2r(n::T, k::T, r::T) where T <: Integer\n\nComputes the logarithm of the r-stirling numbers with an explicit formula.\n\n\n\n\n\n","category":"function"},{"location":"combinatorics/#EqualitySampler.unsignedstirlings1","page":"Combinatorics","title":"EqualitySampler.unsignedstirlings1","text":"unsignedstirlings1(n::Integer, k::Integer) -> Any\n\n\nCompute the absolute value of the Stirlings numbers of the first kind. The EqualitySampler.ExplicitStrategy (default) uses an explicit loop and is computationally more efficient but subject to overflow, so using BigInt is advised. The EqualitySampler.RecursiveStrategy uses recursion and is mathematically elegant yet inefficient for large values.\n\n\n\n\n\n","category":"function"},{"location":"combinatorics/#EqualitySampler.logunsignedstirlings1","page":"Combinatorics","title":"EqualitySampler.logunsignedstirlings1","text":"logunsignedstirlings1(n::Integer, k::Integer) -> Any\n\n\nCompute the logarithm of the absolute value of the Stirlings numbers of the first kind.\n\n\n\n\n\n","category":"function"},{"location":"combinatorics/#EqualitySampler.bellnum","page":"Combinatorics","title":"EqualitySampler.bellnum","text":"bellnum(n::Integer) -> Any\n\n\nComputes the Bell numbers.\n\n\n\n\n\n","category":"function"},{"location":"combinatorics/#EqualitySampler.bellnumr","page":"Combinatorics","title":"EqualitySampler.bellnumr","text":"Computes the r-Bell numbers.\n\n\n\n\n\n","category":"function"},{"location":"combinatorics/#EqualitySampler.logbellnumr","page":"Combinatorics","title":"EqualitySampler.logbellnumr","text":"Computes the logarithm of the r-Bell numbers.\n\n\n\n\n\n","category":"function"},{"location":"combinatorics/#EqualitySampler.PartitionSpace","page":"Combinatorics","title":"EqualitySampler.PartitionSpace","text":"struct PartitionSpace{T<:Integer, P<:EqualitySampler.AbstractPartitionSpace}\n\n# constructor\nPartitionSpace(k::T, ::Type{U} = EqualitySampler.DistinctPartitionSpace)\n\nA type to represent the space of partitions. EqualitySampler.AbstractPartitionSpace indicates whether partitions should contains duplicates or be distinct. For example, the distinct iterator will return [1, 1, 2] but not [2, 2, 1] and [1, 1, 3], which are returned when P = EqualitySampler.DuplicatedPartitionSpace.\n\n\n\n\n\n","category":"type"},{"location":"#EqualitySampler","page":"EqualitySampler","title":"EqualitySampler","text":"","category":"section"},{"location":"","page":"EqualitySampler","title":"EqualitySampler","text":"EqualitySampler defines four distributions over partitions of a set:","category":"page"},{"location":"","page":"EqualitySampler","title":"EqualitySampler","text":"UniformMvUrnDistribution\nBetaBinomialMvUrnDistribution\nRandomProcessMvUrnDistribution\nCustomInclusionMvUrnDistribution","category":"page"},{"location":"","page":"EqualitySampler","title":"EqualitySampler","text":"Each of these is a subtype of the abstract type AbstractMvUrnDistribution which is a subtype of Distributions.DiscreteMultivariateDistribution.","category":"page"}]
}
